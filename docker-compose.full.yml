version: '3.8'

services:
  # Aplicação principal CrypGo
  crypgo-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypgo-app
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - GO_ENV=production
    env_file:
      - .env.production
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - crypgo-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/v1/trading/list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Banco de dados PostgreSQL
  postgres:
    image: postgres:16
    container_name: crypgo-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: crypgo_prod
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./src/infra/database/migrations:/docker-entrypoint-initdb.d
    networks:
      - crypgo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Message Broker RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    container_name: crypgo-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-admin123}
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"
      - "15672:15672"  # Management interface
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - crypgo-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # N8N Automation Platform
  n8n:
    image: n8nio/n8n:latest
    container_name: crypgo-n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-CrypGoN8N2024!}
      - N8N_HOST=${N8N_HOST:-31.97.249.4}
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://31.97.249.4:5678/
      - GENERIC_TIMEZONE=America/Sao_Paulo
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=n8n-postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n_user
      - DB_POSTGRESDB_PASSWORD=${N8N_DB_PASSWORD:-N8NStrongPass123!}
      - N8N_LOG_LEVEL=info
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:-CrypGoN8NEncryptionKey2024SuperStrong!}
    volumes:
      - n8n_data:/home/node/.n8n
      - n8n_workflows:/home/node/.n8n/workflows
    networks:
      - crypgo-network
    depends_on:
      n8n-postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL dedicado para N8N
  n8n-postgres:
    image: postgres:16
    container_name: crypgo-n8n-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: n8n_user
      POSTGRES_PASSWORD: ${N8N_DB_PASSWORD:-N8NStrongPass123!}
      POSTGRES_DB: n8n
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - n8n_postgres_data:/var/lib/postgresql/data
    networks:
      - crypgo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n_user -d n8n"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy (Opcional)
  nginx:
    image: nginx:alpine
    container_name: crypgo-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "8081:8081"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./web:/var/www/html:ro
    networks:
      - crypgo-network
    depends_on:
      - crypgo-app
      - n8n
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  crypgo-network:
    driver: bridge
    name: crypgo-network

volumes:
  postgres_data:
    driver: local
    name: crypgo_postgres_data
  rabbitmq_data:
    driver: local
    name: crypgo_rabbitmq_data
  n8n_data:
    driver: local
    name: crypgo_n8n_data
  n8n_workflows:
    driver: local
    name: crypgo_n8n_workflows
  n8n_postgres_data:
    driver: local
    name: crypgo_n8n_postgres_data