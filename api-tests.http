### üöÄ Teste completo da API CrypGo Machine
### Execute cada request individualmente no GoLand (clique no √≠cone ‚ñ∂Ô∏è)
###
### üìñ INSTRU√á√ïES DE USO:
### 1. Configure http-client.env.json com suas credenciais
### 2. Execute PRIMEIRO o endpoint de LOGIN para obter o token
### 3. O token ser√° AUTOMATICAMENTE salvo na vari√°vel @authToken!
### 4. Use Ctrl+Alt+R no GoLand para executar requests rapidamente

### üîß CONFIGURA√á√ÉO DE AMBIENTE
### Usar vari√°veis do http-client.env.json e http-client.private.env.json:
### O token ser√° salvo automaticamente ap√≥s o login!
@baseUrl = {{baseUrl}}
@email = {{email}}
@password = {{password}}
@authToken = {{authToken}}

### üìä VARI√ÅVEIS √öTEIS PARA TESTES
### Substitua pelos IDs reais dos bots ap√≥s cri√°-los:
#@BOT = 1eb8b9bf-438c-4d38-b1cb-c96f305a1425
#@BOT = ae00a0fa-1bb7-4d71-bb56-917f540c29a1
#@BOT = d96cdc80-4057-4d29-a5a9-935bc22bef64
#XRPBRL
@BOT = 7ac9d46f-ed5c-4f8f-9a79-dd932f48d198

### ========================================
### üîê AUTENTICA√á√ÉO (EXECUTE PRIMEIRO!)
### ========================================

###
### 1. Login - Execute PRIMEIRO para obter o token
POST {{baseUrl}}/api/v1/auth/login
Content-Type: application/json

{
  "email": "{{email}}",
  "password": "{{password}}"
}

> {%
    // Script para salvar automaticamente o token ap√≥s login
    if (response.status === 200) {
        client.global.set("authToken", response.body.access_token);
        client.log("‚úÖ Token salvo automaticamente!");
        client.log("Token: " + response.body.access_token);
    } else {
        client.log("‚ùå Erro no login: " + response.status);
    }
%}


###
### 2. Validar token (opcional)
GET {{baseUrl}}/api/v1/auth/validate
Authorization: Bearer {{authToken}}

###
### 3. Refresh token (opcional)  
POST {{baseUrl}}/api/v1/auth/refresh
Authorization: Bearer {{authToken}}

### ========================================
### üì± TELEGRAM BOT TESTS
### ========================================

###
### 1. Status do Telegram (p√∫blico)
GET {{baseUrl}}/api/v1/telegram/status

###
### 2. Enviar mensagem "OI" 
GET {{baseUrl}}/api/v1/telegram/test
Authorization: Bearer {{authToken}}

### ========================================
### üéÆ CONTROLE DE TRADING BOTS
### ========================================

###
### 4. Iniciar trading bot
POST {{baseUrl}}/api/v1/trading/start
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "bot_id": "{{BOT}}"
}

###
### 5b. Exemplo: Parar bot espec√≠fico usando ID de produ√ß√£o (descomente para usar)
POST {{baseUrl}}/api/v1/trading/stop
Content-Type: application/json
Authorization: Bearer {{authToken}}

 {
   "bot_id": "{{BOT}}"
 }


### üè≠ IDs DOS BOTS EM PRODU√á√ÉO (para refer√™ncia):
### @botIdProdSOL1 = 1b6f580e-908b-42eb-be78-9b982b91e192
### @botIdProdSOL2 = 635165ac-240c-4b07-8172-97750c14e8d1  
### @botIdProdBTC = 23ff5375-bd10-4c71-8964-eb73e9a7de1d

### ========================================
### üìã OPERA√á√ïES B√ÅSICAS
### ========================================

###
### 1. Listar todos os trading bots
GET {{baseUrl}}/api/v1/trading/list
Accept: application/json
Authorization: Bearer {{authToken}}

###
### 2. Criar um novo trading bot (configura√ß√£o campe√£)
POST {{baseUrl}}/api/v1/trading/create_trading_bot
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "symbol": "XRPBRL",
  "quantity": 20.0,
  "strategy": "MovingAverage",
  "params": {
    "FastWindow": 3,
    "SlowWindow": 10
  },
  "interval_seconds": 300,
  "initial_capital": 200.0,
  "trade_amount": 200.0,
  "currency": "BRL",
  "trading_fees": 0.1,
  "minimum_profit_threshold": 4.0,
  "use_fixed_quantity": true
}

###
### 2b. Criar bot com intervalo de 15 minutos (900s)
POST {{baseUrl}}/api/v1/trading/create_trading_bot
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "symbol": "BTCBRL",
  "quantity": 0.0005,
  "strategy": "MovingAverage",
  "params": {
    "FastWindow": 3,
    "SlowWindow": 10
  },
  "interval_seconds": 300,
  "initial_capital": 1000.0,
  "trade_amount": 150.0,
  "currency": "BRL",
  "trading_fees": 0.1,
  "minimum_profit_threshold": 2.0,
  "use_fixed_quantity": true
}

###
### 2b. Criar bot com intervalo de 15 minutos (900s)
POST {{baseUrl}}/api/v1/trading/create_trading_bot
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "symbol": "ETHBRL",
  "quantity": 0.01,
  "strategy": "MovingAverage",
  "params": {
    "FastWindow": 3,
    "SlowWindow": 10
  },
  "interval_seconds": 300,
  "initial_capital": 1000.0,
  "trade_amount": 200.0,
  "currency": "BRL",
  "trading_fees": 0.1,
  "minimum_profit_threshold": 3.0,
  "use_fixed_quantity": true
}


###
### 2c. Criar bot com intervalo de 1 hora (3600s)
POST {{baseUrl}}/api/v1/trading/create_trading_bot
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "symbol": "SOLBRL",
  "quantity": 0.1,
  "strategy": "MovingAverage",
  "params": {
    "FastWindow": 12,
    "SlowWindow": 26
  },
  "interval_seconds": 3600,
  "initial_capital": 2000.0,
  "trade_amount": 500.0,
  "currency": "BRL",
  "trading_fees": 0.1,
  "minimum_profit_threshold": 3.0,
  "use_fixed_quantity": true
}

###
### 3. Criar trading bot com BTCBRL
POST {{baseUrl}}/api/v1/trading/create_trading_bot
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "symbol": "BTCBRL",
  "quantity": 0.001,
  "strategy": "MovingAverage",
  "params": {
    "FastWindow": 7,
    "SlowWindow": 40
  },
  "interval_seconds": 1800,
  "initial_capital": 3000.0,
  "trade_amount": 2000.0,
  "currency": "BRL",
  "trading_fees": 0.1,
  "minimum_profit_threshold": 2.5,
  "use_fixed_quantity": true
}



### ========================================
### üìä BACKTESTING E OTIMIZA√á√ÉO  
### ========================================

###
### 6. Backtest com dados hist√≥ricos reais
POST {{baseUrl}}/api/v1/trading/backtest
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "strategy_name": "MovingAverage",
  "symbol": "SOLBRL",
  "params": {
    "FastWindow": 3,
    "SlowWindow": 7,
    "MinimumSpread": 0.1
  },
  "initial_capital": 5000.0,
  "trade_amount": 1000.0,
  "currency": "BRL",
  "start_date": "2025-07-01T00:00:00Z",
  "end_date": "2025-07-16T23:59:59Z",
  "trading_fees": 0.1,
  "minimum_profit_threshold": 1.0,
  "use_binance_data": true,
  "interval": "5m"
}

###
### 7. Backtest com configura√ß√£o conservadora
POST {{baseUrl}}/api/v1/trading/backtest
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "strategy_name": "MovingAverage",
  "symbol": "SOLBRL",
  "params": {
    "FastWindow": 3,
    "SlowWindow": 10,
    "MinimumSpread": 0.2
  },
  "initial_capital": 3000.0,
  "trade_amount": 1500.0,
  "currency": "BRL",
  "start_date": "2025-07-10T00:00:00Z",
  "end_date": "2025-07-16T23:59:59Z",
  "trading_fees": 0.1,
  "minimum_profit_threshold": 2,
  "use_binance_data": true,
  "interval": "5m"
}

### ========================================
### ‚ö†Ô∏è TESTES DE VALIDA√á√ÉO E ERROS
### ========================================

###
### 8. Teste de valida√ß√£o - Symbol inv√°lido (deve retornar erro)
POST {{baseUrl}}/api/v1/trading/create_trading_bot
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "symbol": "INVALID",
  "quantity": 0.1,
  "strategy": "MovingAverage",
  "params": {
    "FastWindow": 3,
    "SlowWindow": 10
  },
  "interval_seconds": 1800,
  "initial_capital": 5000.0,
  "trade_amount": 5000.0,
  "currency": "BRL",
  "trading_fees": 0.1,
  "minimum_profit_threshold": 5.0,
  "use_fixed_quantity": true
}

###
### 9. Teste de valida√ß√£o - Par√¢metros inv√°lidos (deve retornar erro)
POST {{baseUrl}}/api/v1/trading/create_trading_bot
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "symbol": "SOLBRL",
  "quantity": -1,
  "strategy": "MovingAverage",
  "params": {
    "FastWindow": 0,
    "SlowWindow": -5
  },
  "interval_seconds": 1800,
  "initial_capital": -1000.0,
  "trade_amount": 0,
  "currency": "BRL",
  "trading_fees": 0.1,
  "minimum_profit_threshold": -2.0,
  "use_fixed_quantity": true
}

###
### 10. Teste de bot inexistente (deve retornar erro)
POST {{baseUrl}}/api/v1/trading/start
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "bot_id": "00000000-0000-0000-0000-000000000000"
}

### ========================================
### üìä SENTIMENT ANALYSIS MVP
### ========================================

###
### 1. Trigger manual sentiment analysis
POST {{baseUrl}}/api/v1/sentiment/analyze
Authorization: Bearer {{authToken}}

###
### 2. Quick sentiment check
POST {{baseUrl}}/api/v1/sentiment/quick-check
Authorization: Bearer {{authToken}}

###
### 3. Get sentiment suggestions
GET {{baseUrl}}/api/v1/sentiment/suggestions
Authorization: Bearer {{authToken}}

###
### 4. Get sentiment suggestions with status filter
GET {{baseUrl}}/api/v1/sentiment/suggestions?status=pending&limit=10
Authorization: Bearer {{authToken}}

###
### 5. Generate sentiment suggestion manually
POST {{baseUrl}}/api/v1/sentiment/generate
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "fear_greed_index": 75,
  "news_score": 0.3,
  "reddit_score": 0.1,
  "social_score": 0.2,
  "reasoning": "Manual test sentiment generation with positive market indicators"
}

###
### 6. Approve sentiment suggestion
POST {{baseUrl}}/api/v1/sentiment/approve
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "suggestion_id": "{{suggestionId}}",
  "action": "approve",
  "user_notes": "Manual approval for testing",
  "applied_multiplier": 1.2,
  "applied_threshold": 1.0,
  "applied_interval": 600
}

###
### 7. Get sentiment analytics
GET {{baseUrl}}/api/v1/sentiment/analytics
Authorization: Bearer {{authToken}}

###
### 8. Validate data sources
GET {{baseUrl}}/api/v1/sentiment/data-sources/validate
Authorization: Bearer {{authToken}}

###
### 9. Get scheduler status
GET {{baseUrl}}/api/v1/sentiment/scheduler/status
Authorization: Bearer {{authToken}}

###
### 10. Trigger scheduled analysis manually
POST {{baseUrl}}/api/v1/sentiment/scheduler/trigger
Authorization: Bearer {{authToken}}

###
### 11. Sentiment health check
GET {{baseUrl}}/api/v1/sentiment/health
Authorization: Bearer {{authToken}}

### ========================================
### üì± TELEGRAM SENTIMENT NOTIFICATIONS
### ========================================

###
### 1. Test sentiment notification
POST {{baseUrl}}/api/v1/telegram/test-sentiment
Authorization: Bearer {{authToken}}

###
### 2. Get sentiment notification status
GET {{baseUrl}}/api/v1/telegram/sentiment/status
Authorization: Bearer {{authToken}}