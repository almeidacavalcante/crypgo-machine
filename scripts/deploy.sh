#!/bin/bash

# üöÄ Script Principal de Deploy do CrypGo Trading Bot
# Orquestra todo o processo de deploy na VPS

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo "üöÄ CrypGo Trading Bot - Deploy Script"
echo "====================================="
echo ""

# Verificar se estamos no diret√≥rio correto
if [ ! -f "go.mod" ] || [ ! -f "main.go" ]; then
    echo -e "${RED}[ERROR]${NC} Execute este script no diret√≥rio raiz do projeto!"
    exit 1
fi

# 1. Configurar ambiente de produ√ß√£o
echo -e "${BLUE}[STEP 1/8]${NC} Configurando ambiente de produ√ß√£o..."
if [ ! -f ".env.production" ]; then
    echo -e "${RED}[ERROR]${NC} Arquivo .env.production n√£o encontrado!"
    echo "Por favor, configure suas credenciais em .env.production"
    exit 1
fi

# Usar .env.production
cp .env.production .env
echo -e "${GREEN}[SUCCESS]${NC} Ambiente de produ√ß√£o configurado"

# 2. Subir servi√ßos de infraestrutura
echo -e "${BLUE}[STEP 2/8]${NC} Iniciando servi√ßos de infraestrutura..."
docker-compose -f docker-compose.production.yml up -d postgres rabbitmq

# Aguardar servi√ßos iniciarem
echo -e "${YELLOW}[WAIT]${NC} Aguardando servi√ßos iniciarem (30 segundos)..."
sleep 30

echo -e "${GREEN}[SUCCESS]${NC} Servi√ßos de infraestrutura iniciados"

# 3. Aplicar migrations
echo -e "${BLUE}[STEP 3/8]${NC} Aplicando migrations do banco de dados..."
./scripts/run-migrations.sh
echo -e "${GREEN}[SUCCESS]${NC} Migrations aplicadas"

# 4. Baixar depend√™ncias Go
echo -e "${BLUE}[STEP 4/8]${NC} Baixando depend√™ncias Go..."
go mod download
echo -e "${GREEN}[SUCCESS]${NC} Depend√™ncias baixadas"

# 5. Compilar aplica√ß√£o
echo -e "${BLUE}[STEP 5/8]${NC} Compilando aplica√ß√£o..."
go build -ldflags="-w -s" -o crypgo-machine main.go
echo -e "${GREEN}[SUCCESS]${NC} Aplica√ß√£o compilada"

# 6. Configurar como servi√ßo systemd
echo -e "${BLUE}[STEP 6/8]${NC} Configurando servi√ßo systemd..."
sudo cp scripts/crypgo-machine.service /etc/systemd/system/
sudo systemctl daemon-reload
sudo systemctl enable crypgo-machine
echo -e "${GREEN}[SUCCESS]${NC} Servi√ßo systemd configurado"

# 7. Criar diret√≥rio de logs
echo -e "${BLUE}[STEP 7/8]${NC} Configurando logs..."
sudo mkdir -p /var/log/crypgo-machine
sudo chown $(whoami):$(whoami) /var/log/crypgo-machine
echo -e "${GREEN}[SUCCESS]${NC} Diret√≥rio de logs criado"

# 8. Iniciar aplica√ß√£o
echo -e "${BLUE}[STEP 8/8]${NC} Iniciando aplica√ß√£o..."
sudo systemctl start crypgo-machine
sleep 5

# Verificar status
if sudo systemctl is-active --quiet crypgo-machine; then
    echo -e "${GREEN}[SUCCESS]${NC} ‚úÖ Aplica√ß√£o iniciada com sucesso!"
else
    echo -e "${RED}[ERROR]${NC} ‚ùå Falha ao iniciar aplica√ß√£o"
    echo "Verificando logs:"
    sudo journalctl -u crypgo-machine --no-pager -l
    exit 1
fi

echo ""
echo "üéâ Deploy conclu√≠do com sucesso!"
echo ""
echo -e "${BLUE}[INFO]${NC} Informa√ß√µes importantes:"
echo "‚Ä¢ Aplica√ß√£o rodando na porta 8080"
echo "‚Ä¢ Logs: sudo journalctl -u crypgo-machine -f"
echo "‚Ä¢ Status: sudo systemctl status crypgo-machine"
echo "‚Ä¢ Parar: sudo systemctl stop crypgo-machine"
echo "‚Ä¢ Reiniciar: sudo systemctl restart crypgo-machine"
echo ""
echo -e "${BLUE}[INFO]${NC} Endpoints dispon√≠veis:"
echo "‚Ä¢ Health Check: curl http://localhost:8080/api/v1/trading/list"
echo "‚Ä¢ RabbitMQ Management: http://$(hostname -I | awk '{print $1}'):15672"
echo ""
echo -e "${BLUE}[INFO]${NC} Para fazer backup do banco:"
echo "‚Ä¢ Execute: ./scripts/backup-database.sh"
echo ""
echo -e "${GREEN}[SUCCESS]${NC} üöÄ CrypGo Trading Bot est√° rodando!"